{"pages":[],"posts":[{"title":"AsciiDoc","text":"AsciiDoc Install&nbsp;&nbsp;&nbsp;gem package manager, asciidoctor 설치. ruby install stackoverflow rubyinstaller downloads asciidoctor install asciidoctor 1gem install asciidoctor AsciiDoc Convert&nbsp;&nbsp;&nbsp;기본 html5 로 변환됨 &nbsp;&nbsp;&nbsp;convert-documents 1asciidoctor aaa.adoc Spring-Restdocs&nbsp;&nbsp;&nbsp; maven test 시에 target 하위에 adoc 파일 생성되고 package 수행시에 미리 만들어둔 main 하위 adoc 파일로 html doc 파일이 생성된다. main 하위의 adoc 파일에 unit test 에 생성된 adoc 파일이 include 된다. &nbsp;&nbsp;&nbsp;spring-restdocs-reference &nbsp;&nbsp;&nbsp;restdoc sample git &nbsp;&nbsp;&nbsp;restdoc sample &nbsp;&nbsp;&nbsp;wildfly doc &nbsp;&nbsp;&nbsp;beanvalidation doc AsciiDoc Syntax Quick Reference &nbsp;&nbsp;&nbsp;asciidoc-syntax-quick-reference","link":"/2020/04/26/asciidoc/"},{"title":"Beanvalidation","text":"Structure1234567891011121314151617181920212223242526@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })@Retention(RUNTIME)@Repeatable(List.class)@Documented@Constraint(validatedBy = { })public @interface NotNull { String message() default \"{javax.validation.constraints.NotNull.message}\"; Class&lt;?&gt;[] groups() default { }; Class&lt;? extends Payload&gt;[] payload() default { }; /** * Defines several {@link NotNull} annotations on the same element. * * @see javax.validation.constraints.NotNull */ @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE }) @Retention(RUNTIME) @Documented @interface List { NotNull[] value(); }} message 메세지를 넣거나, {번들키}를 지정. https://beanvalidation.org/latest-draft/spec/#validationapi-message 123 @NotNull(message=\"{com.example.constraints.actor_id.NotNull.message}\") @Size(max = 32, min = 1, message = \"actor_id max length is {max}\")private Long actor_id; 번들 위치 : classpath:ValidationMessages.properties디폴트 메세지 group payload list Message interpolation 번들 위치 변경하려면 message.properties 11022=last_name2 length must less than {max} characters. @Configuration 1234567891011121314@Beanpublic MessageSource messageSource() { ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource(); messageSource.setBasename(\"classpath:/messages/message\"); messageSource.setDefaultEncoding(\"UTF-8\"); messageSource.setCacheSeconds(600); // 10분 return messageSource;}// validation resource 번들을 message.properties 를 사용@Beanpublic LocalValidatorFactoryBean validator() { LocalValidatorFactoryBean bean = new LocalValidatorFactoryBean(); bean.setValidationMessageSource(messageSource()); return bean; validate 12@Size(max = 10, message = \"{1022}\")private String last_name2; test https://docs.jboss.org/hibernate/validator/5.1/reference/en-US/html/chapter-message-interpolation.html#chapter-message-interpolation https://stackoverflow.com/questions/45692179/spring-boot-validation-message-is-not-being-resolved validation 결합 composite annotation for @NotEmpty and @Size 123456789101112131415@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })@Retention(RUNTIME)//@Repeatable(List.class)@Documented@Constraint(validatedBy = { })@NotEmpty(message = \"1011\")@Size(max = 32, min = 1, message = \"1012\")public @interface ValidFirstname { String message() default \"\"; Class&lt;?&gt;[] groups() default { }; Class&lt;? extends Payload&gt;[] payload() default { };} bean 123 // composite validation@ValidFirstnameprivate String first_name; @Validated @Valid https://reflectoring.io/bean-validation-with-spring-boot/ @Validated package org.springframework.validation.annotation; class type 에 사용하여 primitive type param validation 12345678910111213141516@RestController@Validatedclass ValidateParametersController { @GetMapping(\"/validatePathVariable/{id}\") ResponseEntity&lt;String&gt; validatePathVariable( @PathVariable(\"id\") @Min(5) int id) { return ResponseEntity.ok(\"valid\"); } @GetMapping(\"/validateRequestParameter\") ResponseEntity&lt;String&gt; validateRequestParameter( @RequestParam(\"param\") @Min(5) int param) { return ResponseEntity.ok(\"valid\"); }} method type 에 사용시에는 validation group 으로 사용Using Validation Groups to Validate Objects Differently for Different Use Cases invalid 시에 MethodArgumentNotValidException 이 아니라 ConstraintViolationException 리턴. MethodValidationInterceptor 에서 처리 (Controller 와 관련없이 method 호출되기전 aop 로 호출됨.) In contrast to request body validation a failed validation will trigger a ConstraintViolationException instead of a MethodArgumentNotValidException. Spring does not register a default exception handler for this exception, so it will by default cause a response with HTTP status 500 (Internal Server Error). @Valid package javax.validation; class type 에 사용 불가. 주로 PARAMETER 으로 사용 12345@PostMapping(\"/add\")public Actor add(@RequestBody @Valid Actor actor) { actorService.add(actor); return actorService.get(actor.getActor_id());} invalid 시에 MethodArgumentNotValidException 리턴. RequestPartMethodArgumentResolver 에서 처리 (Controller req 파람 리졸버에서.) ConstraintViolationException, MethodArgumentNotValidException 함께 ExceptionHandle 12345678910111213141516171819202122232425@ExceptionHandler({ MethodArgumentNotValidException.class, ConstraintViolationException.class })protected ResponseEntity&lt;Object&gt; methodArgumentNotValidException(Exception ex, WebRequest request) { String messageKey; if(ex instanceof MethodArgumentNotValidException) messageKey = ((MethodArgumentNotValidException)ex).getBindingResult().getFieldError().getDefaultMessage(); else messageKey = CollectionUtils.lastElement(((ConstraintViolationException)ex).getConstraintViolations()).getMessage(); return getExceptionResponseEntity(ex, messageKey, new HttpHeaders(), HttpStatus.BAD_REQUEST, request);}private ResponseEntity&lt;Object&gt; getExceptionResponseEntity(Exception exception, String code, HttpHeaders headers, HttpStatus status, WebRequest request) { Result result; try { result = new Result(code, messageSource.getMessage(code, null, request.getLocale())); } catch (Exception e) { result = new Result(\"9000\", messageSource.getMessage(\"9000\", null, request.getLocale())); } log.error(\"{}\", result); exception.printStackTrace(); return new ResponseEntity&lt;Object&gt;(result, headers, status);} Ref _https://beanvalidation.org/latest-draft/spec/_ _https://beanvalidation.org/latest-draft/spec/#builtinconstraints_ _https://reflectoring.io/bean-validation-with-spring-boot/_ _https://reflectoring.io/bean-validation-anti-patterns/_ _https://www.baeldung.com/spring-boot-bean-validation_ _https://www.baeldung.com/javax-validation_","link":"/2020/04/26/beanvalidation/"},{"title":"ThreadDump","text":"ThreadDump Ref _https://dzone.com/articles/how-to-read-a-thread-dump_","link":"/2020/04/26/ThreadDump/"},{"title":"ChromeDevTool","text":"Ref _https://developers.google.com/web/tools/chrome-devtools_","link":"/2020/04/26/ChromeDevTool/"},{"title":"centos","text":"Cetnos 이거저거rpm 파일명 패키지명-버전-릴리즈번호.OS버전.CPU아키텍처.rpm (ex. zip-3.0-10.el7.x86_64.rpm) 설치rpm -Uvh 패키지파일.rpm(U : install or upgrade, v : verbose, h : hash 표시) 삭제rpm -e 패키지명 설치 패키지 조회 rpm -qa 패키지명 : 설피확인 rpm -qf 파일경로(절대) : 설치된 파일이 어느 패키지에 포함된 것인지. rpm -ql 패키지명 : 특정패키지에 포함되 파일 확인. rmp -qi 패키지명 : 설피되 패키지 상세정보 보기 rmp 파일조회 rpm -qlp 패키지파일.rpm : 패키지 파일에 포함되 파일들 확인 rpm -qip 패키지파일.rmp : 패키지 파일의 상세정보 보기 yumrpm 처럼 설치파일이 필요 없다. 1) 패키지 설치:yum install packageExample:yum install httpd 2) 패키지 삭제:yum remove packageExample:yum remove httpd 3) 패키지 업데이트:yum update packageExample:yum update httpd 4) 패키지 검색:yum search packageExample:yum search httpd 5) 패키지 정보:yum info packageExample:yum info httpd 6) 특정단어가 포함 된 패키지 리스트:yum list termExample:yum list httpd 7) 특정 파일을 제공한 패키지 검색:yum whatprovides filenameExample:yum whatprovides httpd.conf 8) 커널 패키지에 설치된 모든 패키지를 업데이트:yum -y updateExample:yum -y update 9) 설치된 패키지 확인yum list installed ip 확인yum install net-tools locale 설정centos 7 부터는 i18n 을 사용하지 않음 현재 locale 확인 [root@3386ae4861e8 /]# env | grep -e LANG -e LCLANG=en_US.UTF-8 os version 확인 cat /etc/system-release 설치된 key listrpm -qa gpg-pubkey*","link":"/2020/04/29/centos/"},{"title":"dev","text":"간단한 웹 개발기 설정개발기 설치 서비스 정보 ssh jenkins apache tomcat mysql version Apache/2.4.37 ip 3022 9080 80 8080 3600 port 3022 9080 80 8080 3600 설치 /usr/sbin/apache2 설정파일 /etc/apache2/ 로그 /var/log/apache2;/var/log/httpd 계정 root 비밀번호 - 외부접근url - http://domain:9080/ /etc/apache2/","link":"/2020/04/29/dev/"},{"title":"dictionary","text":"indexDictionary 용어설명 Title Description REPL Read Eval Print Loop LTS Long Term Support","link":"/2020/04/26/dictionary/"},{"title":"Docker","text":"Get Started aws cloud9 에서 test. 싱가폴 리젼 123456789101112131415161718192021222324252627282930313233343536372087 docker ps -a2088 docker build -t getstarted:part2 .2089 docker tag getstarted:part2 aichoora/private:getstartedpart2 2091 docker login 2093 docker info | grep User2095 docker push aichoora/private:getstartedpart22096 docker images2097 docker rmi -f 30 2100 docker run -d -p 4000:80 --name jj aichoora/private:getstartedpart22101 docker ps -l 2103 curl localhost:40002104 docker logs b02105 docker inspect b02106 docker exec -it jj bash 2108 docker rm -f b02109 docker ps -a2110 cd ..2111 cd part32112 docker service ls 2114 docker swarm init2115 docker stack deploy -c docker-compose.yml getstartedpart22116 docker service ls2117 docker service ps p32118 docker ps -a2119 curl localhost:4000 2121 docker ps -a2122 docker kill 3f2123 docker serivce ls 2125 docker service ps p32126 docker service rm p32127 docker stack ls2128 docker service ls2129 docker swarm leave --force2130 docker images2131 docker rmi -f 302132 docker logout2133 docker system prunestart 한 container 에 port bindingcommit 후 다시 run docker stop 컨테이너이름docker commit 컨테이너이름 이미지이름docker run -dit -p xx:xx 이미지이름 Ref docs.docker.com","link":"/2020/04/26/docker/"},{"title":"Dos Command","text":"netstat tree _https://web.csulb.edu/~murdock/tree.html_ tree /F : 파일까지 출력 1234tree /f├─static│ └─docs│ index.html tree /A : tree /a 라고 하면, 트리구조를 표현할 때, 그래픽 문자가 아닌, 키보드로 입력 가능한 일반 문자로 표현합니다. 1234tree /a /f+---static| \\---docs| index.html","link":"/2020/04/26/dos/"},{"title":"draft","text":"indexTitle _https://www.baeldung.com/spring-boot-ehcache_ 순서 설명1 설명2 123&lt;dependency&gt; &lt;groupId&gt;코드&lt;/groupId&gt;&lt;/dependency&gt;","link":"/2020/04/26/draft/"},{"title":"Ehcache","text":"Spring Boot 에서 Ehcache version 3 설정 _https://www.baeldung.com/spring-boot-ehcache_ pom.xml net.sf.ehcache 는 version 2 , org.ehcache 는 version3 ehcache.xml 설정방법이 많이 달라졌다. 내용은 비슷한듯… CacheEventListener 로 로깅 하기가 version3 가 좀더 쉬운듯하다. 기본 어노테이션 설정만 하면 로깅 설정을 trace 로 해도 별로 찍히는게 없어서 mbean 통해서 별도 서버를 구축하거나, statistics 정보만 주기적으로 로그에 쌓거나 하기까지 작업이 필요 없을 경우 간단히 CacheEventListener 로 로그를 남기면 될듯 하다. 12345678910111213141516171819&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt; &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;javax.cache&lt;/groupId&gt; &lt;artifactId&gt;cache-api&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.ehcache&lt;/groupId&gt; &lt;artifactId&gt;ehcache&lt;/artifactId&gt; &lt;version&gt;3.6.2&lt;/version&gt;&lt;/dependency&gt; ehcache.xml _https://www.ehcache.org/documentation/3.0/xml.html_ Spring boot 2 이상? 은 version2 3 모두지원. Spring boot 에서 사용시 key vaule type 은 삭제한다. 12345678910111213141516171819202122232425262728293031&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.ehcache.org/v3\" xmlns:jsr107=\"http://www.ehcache.org/v3/jsr107\" xsi:schemaLocation=\" http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core-3.0.xsd http://www.ehcache.org/v3/jsr107 http://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd\"&gt; &lt;cache-template name=\"commonTemplate\"&gt; &lt;!-- &lt;key-type&gt;java.lang.Long&lt;/key-type&gt; --&gt; &lt;!-- &lt;value-type&gt;java.math.BigDecimal&lt;/value-type&gt; --&gt; &lt;expiry&gt; &lt;ttl unit=\"seconds\"&gt;300&lt;/ttl&gt; &lt;/expiry&gt; &lt;listeners&gt; &lt;listener&gt; &lt;class&gt;com.baeldung.cachetest.config.CacheEventLogger&lt;/class&gt; &lt;event-firing-mode&gt;ASYNCHRONOUS&lt;/event-firing-mode&gt; &lt;event-ordering-mode&gt;UNORDERED&lt;/event-ordering-mode&gt; &lt;events-to-fire-on&gt;CREATED&lt;/events-to-fire-on&gt; &lt;events-to-fire-on&gt;EXPIRED&lt;/events-to-fire-on&gt; &lt;/listener&gt; &lt;/listeners&gt; &lt;resources&gt; &lt;heap unit=\"entries\"&gt;2&lt;/heap&gt; &lt;offheap unit=\"MB\"&gt;10&lt;/offheap&gt; &lt;/resources&gt; &lt;/cache-template&gt; &lt;cache alias=\"device\" use-template=\"commonTemplate\"/&gt;&lt;/config&gt; config 에 ehcahce.xml 위치 지정 1spring.cache.jcache.config=classpath:ehcache.xml @EnableCaching 추가1234567@SpringBootApplication@EnableCachingpublic class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); }} cache 대상 설정 key condition 을 지정할수 있으나, 기본 전달하는 파라메터 단위로 설정된다. _https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/cache.html#cache-annotations-cacheable-default-key_ If no params are given, return 0.If only one param is given, return that instance.If more the one param is given, return a key computed from the hashes of all parameters. 파람이 object 의 경우 hashcode &amp; equal 값으로 결정되니 lombok 사용할경우 @EqualsAndHashCode(exclude = {&quot;id&quot;}) 형태로 지정. 12345678910111213@Servicepublic class DeviceService { // ... @Cacheable( value = \"device\", key = \"#deviceId\", condition = \"#deviceId&gt;10\") public Device getDevice(Long deviceId) { //... return new Device(); }} logging CacheEventLogger 123456789101112public class CacheEventLogger implements CacheEventListener&lt;Object, Object&gt; { // ... @Override public void onEvent( CacheEvent&lt;? extends Object, ? extends Object&gt; cacheEvent) { log.info(/* message */, cacheEvent.getKey(), cacheEvent.getOldValue(), cacheEvent.getNewValue()); }} 결과 1INFO [e [_default_]-0] c.b.cachetest.config.CacheEventLogger : Cache event CREATED for item with key 12. Old value = null, New value = 144","link":"/2020/04/26/ehcache/"},{"title":"fcm","text":"indexTitle _https://www.baeldung.com/spring-boot-ehcache_ 순서 설명1 설명2 123&lt;dependency&gt; &lt;groupId&gt;코드&lt;/groupId&gt;&lt;/dependency&gt;","link":"/2020/04/26/fcm/"},{"title":"git","text":"config1234567git --versiongit config --global user.name aichooragit config --global user.email aichoora@gmail.comgit config --get user.emailgit config --listgit config --global --editgit status Work Tree1git add [file] Index (Stage)1git commit -m \"desc\" Local Repository (&gt;git init)1git init log1git log push1git push -u origin master pull1git pull origin master add to index, commit to local repo, push to remote repo1git add . &amp;&amp; git commit -m &quot;...&quot; &amp;&amp; git push branch123git branch -agit branch -vvgit checkout -b localbranchh orain/remotebranch new repository 에 기존 project 추가12345git initgit add .git commit -m &quot;first commit&quot;git remote add origin https://github.com/aichoora/spring-oauth2.gitgit push -u origin master","link":"/2020/04/26/git/"},{"title":"Java process 확인","text":"jps 12345C:\\&gt;jps18816 BootLanguagServerBootApp4904 JJApiApplication9192 Jps18732 tasklist 123456789C:\\&gt;tasklist | find \"java\"javaw.exe 18816 Console 1 153,500Kjavaw.exe 4904 Console 1 351,972KC:\\&gt;jps18816 BootLanguagServerBootApp18052 Jps4904 JJApiApplication18732 netstat -o 123456789101112131415161718192021222324252627282930313233C:\\&gt;jps18816 BootLanguagServerBootApp4904 JJApiApplication187325340 JpsC:\\&gt;netstat -ano | find \"4904\" TCP 0.0.0.0:3128 0.0.0.0:0 LISTENING 4904 TCP 0.0.0.0:3132 0.0.0.0:0 LISTENING 4904 TCP 0.0.0.0:3133 0.0.0.0:0 LISTENING 4904 TCP 0.0.0.0:8080 0.0.0.0:0 LISTENING 4904 TCP 0.0.0.0:35729 0.0.0.0:0 LISTENING 4904 TCP 127.0.0.1:3131 127.0.0.1:3129 ESTABLISHED 4904 TCP 127.0.0.1:3136 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3137 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3138 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3139 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3140 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3141 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3142 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3143 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3144 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3145 127.0.0.1:3306 ESTABLISHED 4904 TCP 127.0.0.1:3147 127.0.0.1:3148 ESTABLISHED 4904 TCP 127.0.0.1:3148 127.0.0.1:3147 ESTABLISHED 4904 TCP 127.0.0.1:3149 127.0.0.1:3150 ESTABLISHED 4904 TCP 127.0.0.1:3150 127.0.0.1:3149 ESTABLISHED 4904 TCP 127.0.0.1:8080 127.0.0.1:3241 FIN_WAIT_2 4904 TCP 127.0.0.1:8080 127.0.0.1:3242 FIN_WAIT_2 4904 TCP 127.0.0.1:8080 127.0.0.1:3246 FIN_WAIT_2 4904 TCP 127.0.0.1:8080 127.0.0.1:3247 FIN_WAIT_2 4904 TCP 127.0.0.1:8080 127.0.0.1:3248 FIN_WAIT_2 4904 TCP 127.0.0.1:8080 127.0.0.1:3249 FIN_WAIT_2 4904 Ref _https://dzone.com/articles/how-to-read-a-thread-dump_","link":"/2020/04/26/findjavaprocess/"},{"title":"Hexo blog","text":"Hexo blog 만들기Hexo 설치 Node , Git 설치 Hexo 설치 1npm install hexo-cli -g hexo scafold 생성 1hexo init 폴더명 package install 1npm install 서버구동 1hexo s 새글작성 새 게시글 작성 hexo new 포스트명 드래프트글 작성 hexo new draft “포스트명” git 배포 git deploy 설정 (_config.yml) 1234deploy: type: git repo: https://github.com/xxx/blog.git branch: master generate &amp; deploy 1hexo clean; hexo d -g 테마 설치 icarus 테마 설치 1git clone git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 적용 clean , generate, deploy 1hexo clean;hexo d -g site url 수정 _config.xml logo 수정 themes/icarus/source/img/logo.svg 수정 테마적용","link":"/2020/04/26/hexo/"},{"title":"install-apache-ubuntu","text":"Ubuntu Apache 설치 설치 apt install apache2 시작 service apache2 start 버전확인 apachectl -version 모듈 사용 설정 확인 apachectl -M Reverse Proxy 설정a2enmod 명령어를 통해 아래 모듈 활성화 a2enmod proxya2enmod proxy_httpa2enmod proxy_balancera2enmod lbmethod_byrequests 아파치 설정 디렉토리/etc/apache2/ 아파치 기본 설정 파일/etc/apache2/apache2.conf 아파치 포트 설정 파일/etc/apache2/ports.conf virtual host 관리 디렉토리 (아파치에서는 해당 디렉토리를 직접 참조하지는 않는다.)/etc/apache2/sites-available/ virtual host를 이용하기 위한 설정 디렉토리/etc/apache2/sites-enabled/000-default.conf -&gt; ../sites-available/000-default.conf 와 같이 심볼릭 링크를 이용하여 sites-available 디렉토리 파일을 참조하는 방식으로 사용되어진다. 모듈 설정 디렉토리/etc/apache2/mods-available/, /etc/apache2/mods-enabled/ apache tomcat 연동mod_jk 컨넥터 설치apt install libapache2-mod-jk workers.properties 파일 생성/etc/apache2/workers.properties 12345678910111213141516171819202122workers.tomcat_home=/usr/share/tomcat8workers.java_home=/usr/lib/jvm/java-8-openjdk-amd64# oracle jdk 사용시# workers.java_home=/usr/lib/jvm//java-8-oracle/# Define 1 real worker ajp13worker.list=tomcat1# worker.list=tomcat1,tomcat2 # 복수개이경우# Set properties for tomcat1 (ajp13)worker.tomcat1.port = 8009# worker.tomcat1.host = 192.168.123.120 # 로컬일 경우worker.tomcat1.host = localhostworker.tomcat1.type = ajp13worker.tomcat1.lbfactor = 20# Set properties for tomcat2 (ajp13)# worker.tomcat2.port = 8019# worker.tomcat2.host = ip# worker.tomcat2.type = ajp13# worker.tomcat2.lbfactor = 30jk.conf 파일 수정/etc/apache2/mods-available/jk.conf 12# JkWorkersFile /etc/libapache2-mod-jk/workers.propertiesJkWorkersFile /etc/apache2/workers.properties default.conf 수정/etc/apache2/sites-available/000-default.conf 1234567891011121314 DocumentRoot /var/www/html JkMount /* tomcat1 ``` ## server.xml ajp 포트 설정/var/lib/tomcat8/conf/server.xml 8009 connector 주석 해제## apache2, tomcat restart ``` sh root@80debf1018f4:/etc/init.d# ./apache2 restart root@80debf1018f4:/etc/init.d# ./tomcat8 restart","link":"/2020/04/29/install-apache-ubuntu/"},{"title":"install-apache-centos","text":"centos 아파치 서버 설치설치 yum -y install httpd 설치확인 yum list installed | grep httpd 버전 확인 httpd -v 데몬시작 systemctl start httpd.service 부팅시 httpd 등록 systemctl enable httpd.service 방화벽 오픈 firewall-cmd –permanent –zone=public –add-service=httpfirewall-cmd –reloadfirewall-cmd –list-port tomcat 연동gcc gcc-c++ httpd-devel make 설치yum install gcc gcc-c++ httpd-devel make mod_jk(다운로드 &amp; 설치)wget http://mirror.navercorp.com/apache/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.48-src.tar.gztar zxvf tomcat-connector*cd tomcat-connectors-1.2.48-src/native./configure –with-apxs=/usr/bin/apxsmakemake install LoadModule 추가vi /etc/httpd/conf/httpd.confLoadModule jk_module modules/mod_jk.sohttpd-jk.conf 생성vi /etc/httpd/conf.d/httpd-jk.conf 12345678LoadModule jk_module modules/mod_jk.so&lt;IfModule jk_module&gt; JkWorkersFile conf.d/workers.properties JkLogFile logs/mod_jk.log JkLogLevel info JkShmFile run/mod_jk.shm JkMountFile conf.d/uriworkermap.properties&lt;/IfModule&gt; worker 생성vi /etc/httpd/conf.d/workers.properties 12345worker.list=tomcat1 worker.tomcat1.port=8009 worker.tomcat1.host=localhost worker.tomcat1.type=ajp13 worker.tomcat1.lbfactor=1 uriworkermap 생성vi /etc/httpd/conf.d/uriworkermap.properties 1/*=tomcat1 config 테스트apachectl configtest tomcat ajp port 오픈vi /opt/tomcat/conf/server.xmlajp 포트설정 apache2, tomcat 재기동systemctl restart tomcatsystemctl restart httpd Ref09. 리눅스(CentOS) 개발 놀이터 만들기 - Apache와 Tomcat 연동","link":"/2020/04/28/install-apache-centos/"},{"title":"install-tomcat-ubuntu","text":"Ubuntu 에 java 설치하기설치확인java -version 설치할패키지 확인apt list | grep openjdk 설치apt install openjdk-8-jdk -y 파일위치 위치 설명 설치 /usr/lib/jvm/java-8-openjdk-amd64","link":"/2020/04/29/install-java-ubuntu/"},{"title":"install-mysql-centos","text":"","link":"/2020/04/28/install-mysql-centos/"},{"title":"install-jenkins-centos","text":"CentOS jenkins 설치LTS version 다운로드,키 import,설치 wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.reporpm –import http://pkg.jenkins.io/redhat-stable/jenkins.io.keyrpm -qa gpg-pubkey* # 설치된 키확인 (d50582e6)yum install jenkins Java 설치 yum install java-1.8.0-openjdk 포트 변경 /etc/sysconfig/jenkinsJENKINS_PORT=9080 방화벽 오픈 firewall-cmd –permanent –zone=public –add-port=9080/tcpfirewall-cmd –reloadfirewall-cmd –list-port 기동 systemctl start jenkins 시스템부팅시 기동 systemctl enable jenkins 접근 url domain:9080 초기 admin password /var/lib/jenkins/secrets/initialAdminPassword 참고 RedHat Linux RPM packages for Jenkins Installing Jenkins on Red Hat distributions","link":"/2020/04/28/install-jenkins-centos/"},{"title":"install_svn_centos","text":"CentOS SVN 설치SVN 설치 설치여부확인 svn 설치할 패키지확인 yum list subversion 설치 yum install subversion -y","link":"/2020/04/27/install-svn-centos/"},{"title":"install-ssh-centos","text":"ssh 설치 설치 yum install openssh-server openssh-clients openssh-askpass 위치확인 which sshd 포트변경 vi /etc/ssh/sshd_config 방화벽해제 firewall-cmd –permanent –zone=public –add-port=3022/tcpfirewall-cmd not found 시 firewalld 설치 구동 /bin/systemctl sshd restart","link":"/2020/04/28/install-ssh-centos/"},{"title":"install-ssh-ubuntu","text":"Ubuntu SSH 설치 설치 apt install openssh-sever -y 포트변경 /etc/ssh/sshd_config","link":"/2020/04/29/install-ssh-ubuntu/"},{"title":"install-jvm-centos","text":"CentOS java 설치설치 확인 yum list installed | grep javaorjava -version 설치학 패키지 확인 yum search java 버전 확인후 패키지명 으로 검색 yum list java-1.8.0-openjdk 설치 yum install java-1.8.0-openjdk 삭제 yum remove java-1.8.0-openjdk","link":"/2020/04/28/install-jvm-centos/"},{"title":"intall-tomcat-centos","text":"Centos 에 Tomcat 설치하기버전 선택tomcat 그룹, 유저생성 groupadd tomcatuseradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat 다운로드 &amp; 설치 cd; wget http://mirror.navercorp.com/apache/tomcat/tomcat-8/v8.5.54/bin/apache-tomcat-8.5.54.tar.gzmkdir /opt/tomcat;tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat –strip-components=1 권한설정 chgrp -R tomcat /opt/tomcatchmod -R g+r /opt/tomcat/confchmod g+x /opt/tomcat/confchown -R tomcat webapps/ work/ temp/ logs/ 서비스추가vi /etc/systemd/system/tomcat.service 1234567891011121314151617181920212223242526# Systemd unit file for tomcat[Unit]Description=Apache Tomcat Web Application ContainerAfter=syslog.target network.target[Service]Type=forkingEnvironment=JAVA_HOME=/usr/lib/jvm/jreEnvironment=CATALINA_PID=/opt/tomcat/temp/tomcat.pidEnvironment=CATALINA_HOME=/opt/tomcatEnvironment=CATALINA_BASE=/opt/tomcatEnvironment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'ExecStart=/opt/tomcat/bin/startup.shExecStop=/bin/kill -15 $MAINPIDUser=tomcatGroup=tomcatUMask=0007RestartSec=10Restart=always[Install]WantedBy=multi-user.target systemctl daemon-reloadsystemctl start tomcat admin 계정생성vi /opt/tomcat/conf/tomcat-users.xml 123&lt;tomcat-users&gt; &lt;user username=\"admin\" password=\"password\" roles=\"manager-gui,admin-gui\"/&gt;&lt;/tomcat-users&gt; manager access ip 제한 삭제vi /opt/tomcat/webapps/manager/META-INF/context.xmlip 설정 삭제(comment out) 재기동 systemctl restart tomcat admin 접속http://도메인/manager/html 설치경로 위치 설명 설치경로 /opt/tomcat 실행파일 /opt/tomcat/bin 설정파일 /opt/tomcat/conf 배포경로 /opt/tomcat/webapps 로그파일 /opt/tomcat/logs RefHow To Install Apache Tomcat 8 on CentOS 7","link":"/2020/04/28/install-tomcat-centos/"},{"title":"install-tomcat-ubuntu","text":"Ubuntu 에 Tomcat 설치하기버전 선택설치apt install tomcat8 tomcat8-docs tomcat8-examples tomcat8-admin -y 기동service tomcat8 startorsh /etc/init.d/tomcat8 start 파일위치 위치 설명 설치 /var/lib/tomcat8 기동 /usr/share/tomcat8/bin 설정 /var/lib/tomcat8/conf/ 배포 /var/lib/tomcat8/webapps 로그 /var/lib/tomcat8/logs","link":"/2020/04/29/install-tomcat-ubuntu/"},{"title":"intellij","text":"eclipse vs intellij장점 전체적으로 인텔리 센싱 기능이 좋음 최초 IDE 구동시 indexing 하는 시간이 필요하지만, 이후 버벅거림? 이 적음. 전체적으로 빠른느낌. 자동완성이나 quick fix, refactor 할때 등. Community 버전은 프레임웍 지원이 안되고, 로컬 was 프로파일이 없어서 설정이 어려움. ultimate 버전 안쓸거면 그냥 eclipse dark 테마가 eclipse 보다 보기 편함. 검색 결과가 빠름. 플러그인 설치가 용이 mybatis 플러그인 설치하면 mapper 에서 바로 xml sql 로 이동됨. spring 빈 정의로 바로 이동되거나 있었으면 했던 부분이 있음. 단점 한개 project 가 한개의 window 가 이므로 이클립스처럼 여러개 띄워놓고 한꺼번에 검색이 안됨. pom jar 이름으로 검색이 안됨. dependency 확인할때 많이 쓰던 부분인데… jboss 설정을 수동으로 해야함. base director 설정등 vmoption 으로 전달해 주어야함. intellij keymap기본 intellij keymap 에 적응하려 했으나, 이젠 잘 안된다. 자꾸 손에 익은걸로 가게 되네.. 이클립스 keymap 사용하기로 했다. 아래는 수동으로 mapping 해준 부분 이다. find actions : ctrl + 3 terminal : ctrl + ` close : ctrl + f4 -&gt; ctrl + w intellij plugin lombok mybatis","link":"/2020/04/26/intellij/"},{"title":"java","text":"indexJava openjdk _https://github.com/ojdkbuild/ojdkbuild_ Ref","link":"/2020/04/26/java/"},{"title":"java_security","text":"indexjava-security-overview _https://www.baeldung.com/java-security-overview#public_key_infrastructure_ HSM 설명1 설명2 123&lt;dependency&gt; &lt;groupId&gt;코드&lt;/groupId&gt;&lt;/dependency&gt; 인증서 키생성 키스토어 CA 서명 서명확인 메세지다이제스트 JCA/JCE","link":"/2020/04/26/java_security/"},{"title":"maven","text":"indexMaven AsciiDoc Install&nbsp;&nbsp;&nbsp;gem package manager, asciidoctor 설치. ruby install stackoverflow rubyinstaller downloads asciidoctor install asciidoctor 1gem install asciidoctor AsciiDoc Convert&nbsp;&nbsp;&nbsp;기본 html5 로 변환됨 &nbsp;&nbsp;&nbsp;convert-documents 1asciidoctor aaa.adoc Spring-Restdocs&nbsp;&nbsp;&nbsp; maven test 시에 target 하위에 adoc 파일 생성되고 package 수행시에 미리 만들어둔 main 하위 adoc 파일로 html doc 파일이 생성된다. main 하위의 adoc 파일에 unit test 에 생성된 adoc 파일이 include 된다. &nbsp;&nbsp;&nbsp;spring-restdocs-reference &nbsp;&nbsp;&nbsp;restdoc sample git &nbsp;&nbsp;&nbsp;restdoc sample Ref &nbsp;&nbsp;&nbsp;https://maven.apache.org/","link":"/2020/04/26/maven/"},{"title":"bouncycastle 추가","text":"Jdk 8 bouncycastle provider 추가하기jre 에 추가 하거나 소스에 추가한다. JRE 에 추가 하기 jar 설치 https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on/1.64 jar 다운로드후 jre_home/lib/ext 에 복사 java.security 파일에 프로바이더 추가. jre_home/lib/security/java.security 파일에 BC 프로바이더 추가 123456789101112security.provider.1=sun.security.provider.Sunsecurity.provider.2=sun.security.rsa.SunRsaSignsecurity.provider.3=sun.security.ec.SunECsecurity.provider.4=com.sun.net.ssl.internal.ssl.Providersecurity.provider.5=com.sun.crypto.provider.SunJCEsecurity.provider.6=sun.security.jgss.SunProvidersecurity.provider.7=com.sun.security.sasl.Providersecurity.provider.8=org.jcp.xml.dsig.internal.dom.XMLDSigRIsecurity.provider.9=sun.security.smartcardio.SunPCSCsecurity.provider.10=sun.security.mscapi.SunMSCAPI# 추가security.provider.11=org.bouncycastle.jce.provider.BouncyCastleProvider 테스트 1234567891011package security;import java.security.Security;import java.util.Arrays;public class AddBCProvider { public static void main(String[] args) { Arrays.asList(Security.getProviders()).stream().forEach(pv -&gt; System.out.println(pv.getInfo())); }} 123SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS &amp; DKS keystores; PKIX CertPathValidator; PKIX CertPathBuilder;...BouncyCastle Security Provider v1.64 프로그램에서 추가하기 pom.xml 12345&lt;dependency&gt;&lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;&lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;&lt;version&gt;1.64&lt;/version&gt;&lt;/dependency&gt; 코드에 프로바이더 추가 및 테스트 12345678910111213import org.bouncycastle.jce.provider.BouncyCastleProvider;public class AddBCProvider { // 프로바이더 추가 static { Security.addProvider(new BouncyCastleProvider()); } public static void main(String[] args) { Arrays.asList(Security.getProviders()).stream().forEach(pv -&gt; System.out.println(pv.getInfo())); }} 123SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS &amp; DKS keystores; PKIX CertPathValidator; PKIX CertPathBuilder;...BouncyCastle Security Provider v1.64 프로바이더 선택%JRE_HOME%/lib/security/java.security 번호순 우선순위. Figure 2-1 Request SHA-256 Message Digest Implementation Without Specifying Provider Figure 2-2 Request SHA-256 Message Digest with ProviderC 디버깅_https://docs.oracle.com/javase/8/docs/technotes/guides/security/troubleshooting-security.html_-D 옵션추가 예) 프로바이더 로깅 : -Djava.security.debug=provider wildfly 에 bouncy castle 추가하기war 로 디플로이 할경우 bouncy castle class path 는 WEB-INF/lib wildfly module jre extension lib 세곳에 들어 갈수 있으나, 1&amp;2, 1&amp;3 에 bc jar 가 함께 포함 될경우 런타임에 참조되는 class 가 다를수 있다. 1234ECNamedCurveParameterSpec namedCurve = ECNamedCurveTable.getParameterSpec(\"P-256\");org.bouncycastle.jce.spec.ECPublicKeySpec pubSpec = new org.bouncycastle.jce.spec.ECPublicKeySpec(namedCurve.getCurve().createPoint(PubX, PubY), namedCurve);KeyFactory kFact = KeyFactory.getInstance(\"EC\", \"BC\");PublicKey pubKey = kFact.generatePublic(pubSpec); 위 kFact.generatePublic(pubSpec) 코드의 샐행시KeyFactory 의 BC 구현체(org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi)에서if (keySpec instanceof ECPublicKeySpec) 를 검증하지만이 ECPublicKeySpec 는 jre 의 참조 인스턴스이고,넘겨받은 keySpec 은 war 또는 wildfly 의 jar 를 참조하므로 검증에 실패하게 된다._https://stackoverflow.com/questions/29700288/bouncycastle-1-51-loading-in-war-on-wildfly-8-0_ jre 에만 provider 설정을 남겨놓거나, 이게 어려울경우 (wildfly 에 jre/ext jar 추가하는 방법을 찿지 못함;;)소스상에서 jre 프로바이더를 제거하고 war 에서 참조하고 있는 bc lib 로 다시 프로바이더를 생성 추가한다. 12Security.removeProvider(BouncyCastleProvider.PROVIDER_NAME);Security.addProvider(new BouncyCastleProvider()); _https://liferay.dev/forums/-/message_boards/message/111998866_ wildfly module dependency 추가bouncycastle 모듈은 wildfly 9 이상? 포함되어 있다.때문에 어플리케이션의 jboss 배포 디스크립터에 의존성만 추가하면 된다._https://developer.jboss.org/thread/175395_jboss-deployment-structure.xml 1234567&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;jboss-deployment-structure xmlns=\"urn:jboss:deployment-structure:1.1\"&gt; &lt;deployment&gt; &lt;module name=\"org.bouncycastle\" slot=\"main\" export=\"true\"/&gt; &lt;/deployment&gt;&lt;/jboss-deployment-structure&gt; wildfly class loading_https://docs.jboss.org/author/display/WFLY/Class+Loading+in+WildFly_In order of highest priority to lowest priority System Dependencies - These are dependencies that are added to the module automatically by the container, including the Java EE api’s.User Dependencies - These are dependencies that are added through jboss-deployment-structure.xml or through the Dependencies: manifest entry.Local Resource - Class files packaged up inside the deployment itself, e.g. class files from WEB-INF/classes or WEB-INF/lib of a war.Inter deployment dependencies - These are dependencies on other deployments in an ear deployment. This can include classes in an ear’s lib directory, or classes defined in other ejb jars. RefJava Cryptography Architecture (JCA) Reference Guide","link":"/2020/04/26/java_addprovider/"},{"title":"Logging","text":"Logger logger config file jul(java utility logging) logging logging.properties jcl(apache common logging) commong-logging.properties log4j log4j.{xml,properties} log4j2 log4j2.{xml,properties} logback logback.{xml,properties} jboss-logging jboss-logging.{xml,properties} slf4j api bridge binding spring boot logging 기본 config 위치 org/springframework/boot/logging/logback/defaults.xml wildfly logging Admin_Guide logging The following configuration files are allowed: logging.properties jboss-logging.properties log4j.properties log4j.xml jboss-log4j.xml log4j2 나 logback 은 없다. 쓰려면 module 을 추가하거나, logging subsystem 을 jboss-deployment-structure 에서 exclude 하거나 jboss configuration file (standalone.xml 이나 domain.xml) 에 logging subsystem 에서 dependency 제거 하는 설정( add-logging-api-dependencies )을 해야한다. 반대로 application 에서 지정된 logging config 파일을 무시 하려면 (per-deployment logging 스캔을 skip) use-deployment-logging-config 를 false 지정한다. wildfly 는 기본 설치되어 있는 logging.properties 를 서버 기동(boot) 시에 사용한다. boot 이후 deployment 로드 이후에는 사용가능한 logging config 를 찿으면 대체 한다. 하지만 wildfly module 에는 기본 log4j2 나 logback 에 설치되어있지 않고, 이를 사용하기 위해 단순히 jboss logging subsystem 만 exclude 하면 server.log 에는 기본 logging.properties 패턴 + [stdout] + log4j2|logback 의 console output 이 출력된다. Ref _https://logging.apache.org/log4j/2.x/manual/migration.html_ _https://logging.apache.org/log4j/2.x/manual/layouts.html_ _http://logback.qos.ch/manual/architecture.html_ _http://www.slf4j.org/manual.html_ _https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-logging_ _https://docs.wildfly.org/12/Admin_Guide.html#Logging_","link":"/2020/04/26/logging/"},{"title":"MarkDown","text":"MarkDown Mastering Markdown Markdown Cheatsheet Basic writing and formatting syntax asciidoc-vs-markdown extended-syntax","link":"/2020/04/26/markdown/"},{"title":"node","text":"indexNode 전역변수 global console export process…","link":"/2020/04/26/node/"},{"title":"openssh","text":"==== openssh https://hahaite.tistory.com/307 https://docs.microsoft.com/ko-kr/windows-server/administration/openssh/openssh_keymanagement","link":"/2020/04/26/openssh/"},{"title":"project management","text":"개발 전반 cloud Top 5 Alternatives to Heroku _https://blog.back4app.com/2018/03/13/heroku-alternatives/_ Ref","link":"/2020/04/26/project/"},{"title":"식물들","text":"죽이지말자 😍 : 아주 좋아함, 😄 : 좋아함, 🤨 : 보통, 🥵 : 싫어함 , ☠ : 죽을것 같다내건성 : (토양수분 건조에 견디는 힘) 5단계①매우 약함 ②약함 ③보통 ④강함 ⑤매우 강함 식물 빛 바람 물 흙 온도 월동 번식 과 주의 내건성 로즈마리 😍 😍 🥵 사양토 20~25℃ 10℃ 5~7cm삽목. 늦봄 or 초여름. 차광 꿀풀과 과습 율마 😍 😍 😍 사양토 16~20℃ 10℃ 5~7cm삽목. 늦봄 or 초여름. 차광 측백나무과 물부족 뱅갈고무나무 😍 😍 😍 사양토 21~25℃ 13℃ 5~7cm삽목. 늦봄 or 초여름. 차광 뽕나무과 저온, 햇빛(강하면 타고 부족하면 잎이 떨어짐) 황금죽 😍 😍 😍 사양토 16~20℃ 13℃ 5~7cm삽목. 늦봄 or 초여름. 차광 백합과 테이블야자 😍 😍 🤨 사양토 21~25℃ 13℃ 5~7cm삽목. 늦봄 or 초여름. 차광 야자과 4 실내정원물관리","link":"/2020/04/26/plant/"},{"title":"springRestService","text":"index간단한 rest api service 만들기 Infra nginx wildfly12 mysql 8.0.17 Community Server GPL software stack openjdk 1.8 spring boot 2.2.1 web mybatis mysql-connector lombok devtool restdocs actuator mybatis ehcache log4j (logback 제거. jboss config 파일로 바로 사용하기 위해) deployment maven git jenkins docker documentation restdoc test junit swagger postman curl security spring security 개발순서 jdk 설치 sts 설치 sts jboss 설치 spring boot starter 프로젝트 생성 properties 생성 logging (container,req,res,sql,exception) mysql 설치 및 sakila sample db 설치 mysql 연동 interceptor controller exception restdoc caching scheduler unit test documentation OpenJDK _https://github.com/ojdkbuild/ojdkbuild_ STS _https://spring.io/tools_ Properties _https://www.baeldung.com/properties-with-spring_ _https://www.baeldung.com/spring-yaml_ Common Application properties Mybatis Mybatis Sample Mybatis Spring Boot Mybatis Generator log4jdbc _https://log4jdbc.brunorozendo.com/_ pom1234567891011 &lt;!-- log4jdbc --&gt; &lt;dependency&gt; &lt;groupId&gt;org.bgee.log4jdbc-log4j2&lt;/groupId&gt; &lt;artifactId&gt;log4jdbc-log4j2-jdbc4.1&lt;/artifactId&gt; &lt;version&gt;1.16&lt;/version&gt; &lt;/dependency&gt;``` - resources\\log4jdbc.log4j2.properties```propertieslog4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegatorlog4jdbc.dump.sql.maxlinelength=0 application.yml (datasource)1234spring:datasource:driver-class-name : net.sf.log4jdbc.sql.jdbcapi.DriverSpyurl : jdbc:log4jdbc:mysql://localhost:3306/sakila?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true application.yml (logging)12345678910111213141516logging: level: # mybatis sql log off com.zaxxer : off com.xxx.api.mapper : off org.mybatis : off org.springframework.jdbc.datasource : off # log4jdbc jdbc : off jdbc.sqlonly : off jdbc.sqltiming : debug jdbc.audit : off jdbc.resultset : off jdbc.resultsettable : debug jdbc.connection : off output123456789101112131419-11-30 토 02:39:38.725 DEBUG 12012 --- [nio-8080-exec-1] sqltiming : com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)11. SELECT actor_id, first_name, last_name, last_update FROM actor WHERE actor_id = 1{executed in 1 msec}19-11-30 토 02:39:38.726 INFO 12012 --- [nio-8080-exec-1] resultsettable : |---------|-----------|----------|----------------------||actor_id |first_name |last_name |last_update ||---------|-----------|----------|----------------------||1 |PENELOPE |GUINESS |2006-02-15 13:34:33.0 ||---------|-----------|----------|----------------------| Error Handling-https://www.baeldung.com/global-error-handler-in-a-spring-rest-api_ FilterInterceptorResponse 공통처리 ResponseBodyAdvice input validationtesting swagger_https://github.com/springfox/springfox/issues/1499_ ResponseBodyAdvice 적용된 controller 는 ui 에 나타나지 않음. =&gt; 해결 package controller 만지정. _https://github.com/springfox/springfox/issues/1499_ 1@ControllerAdvice(basePackages = \"com.yourpacackge.requesthandler\") Mysql _https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html_","link":"/2020/04/26/springRestService/"},{"title":"spring","text":"indexSpring Spring MVC request life cycle Static Resources/docs/index.html 로 접근하려면.. _https://docs.spring.io/spring/docs/5.2.1.RELEASE/spring-framework-reference/web.html#mvc-config-static-resources_ _https://www.baeldung.com/spring-mvc-static-resources_ 12345src/main/resources └─static └─docs └─ index.html 12345678910111213141516 @Configuration public class RestDocConfig implements WebMvcConfigurer {@Overridepublic void addResourceHandlers(ResourceHandlerRegistry registry) { // classpath registry.addResourceHandler(\"/docs/**\").addResourceLocations(\"classpath:/static/docs/\").setCachePeriod(3600); // web root (WEB-INF parent directory) ex) WebContent/public/index.html // jar 배포시에는 사용하지말것. registry.addResourceHandler(\"/docs/**\").addResourceLocations(\"/public\").setCachePeriod(3600); // file full path registry.addResourceHandler(\"/docs/**\").addResourceLocations(\"file:src/main/resources/static/docs/\").setCachePeriod(3600);} ... default mapping 1ResourceHttpRequestHandler [&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot;, &quot;/&quot;] Error Handle_https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-exceptionhandlers_ ResponseEntityExceptionHandler 에서 global exception 처리 @ControllerAdvice 를 사용하여 ResponseEntityExceptionHandler 상속받아 별도의 exception handling 을 하려는 경우 @ExceptionHandler(Exception.class) 로 global exception 으로 사용하려 해도 ResponseEntityExceptionHandler 내의 @ExceptionHandler 가 정의 되어있으면 그것을 사용하게 되어 global exception 으로 일원화 하여 response 를 관리 할 수 없게 된다. 이미 제공된 핸들러는 아래와 같으므로, 제공된 핸들러를 사용하지 않을 경우 ResponseEntityExceptionHandler 를 상속하지 않는다. 12345678910111213141516171819202122/*** Provides handling for standard Spring MVC exceptions.* @param ex the target exception* @param request the current request*/@ExceptionHandler({ HttpRequestMethodNotSupportedException.class, HttpMediaTypeNotSupportedException.class, HttpMediaTypeNotAcceptableException.class, MissingPathVariableException.class, MissingServletRequestParameterException.class, ServletRequestBindingException.class, ConversionNotSupportedException.class, TypeMismatchException.class, HttpMessageNotReadableException.class, HttpMessageNotWritableException.class, MethodArgumentNotValidException.class, MissingServletRequestPartException.class, BindException.class, NoHandlerFoundException.class, AsyncRequestTimeoutException.class }) ExceptionHandlerExceptionResolver &gt; ResponseStatusExceptionResolver &gt; DefaultHandlerExceptionResolver &gt; SimpleMappingExceptionResolver 순으로 처리한다. SimpleMappingExceptionResolver 은 기본빈으로 등록되어 있지 않음. afterCompletion(HttpServletRequest, HttpServletResponse, Object, Exception) 를 사용하여 Exception 을 처리 할 수 있음 HandlerExceptionResolver 와 같이 사용 했을 때 유의 할 점은 이미 처리 된 Exception 에 대해서는 Interceptor 하지 않는점이다.","link":"/2020/04/26/spring/"},{"title":"springboot_errorhandling","text":"indexTitle _https://www.baeldung.com/spring-boot-ehcache_ 순서 설명1 설명2 123&lt;dependency&gt; &lt;groupId&gt;코드&lt;/groupId&gt;&lt;/dependency&gt;","link":"/2020/04/26/springboot_errorhandling/"},{"title":"Spring Boot &amp; Liquibase","text":"Spring Boot &amp; Liquibasewas 구동 또는 메이븐 실행(mvn liquibase:update) 시점에 sql이 실행된다._https://javadeveloperzone.com/spring-boot/spring-boot-liquibase-example_ pom.xml 1234567891011121314151617181920212223 &lt;dependencies&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.liquibase&lt;/groupId&gt; &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&lt;/dependency&gt; &lt;/dependencies&gt; application.yml 12345678910111213141516171819logging: level: liquibase: debug spring: datasource: driver-class-name: org.h2.Driver password: sa url: jdbc:h2:mem:test; username: sa h2: console: enabled: true liquibase: change-log: classpath:liquibase.xml drop-first: false # default enabled: true # default liquibase script 위치 liquibase.xml 123456789101112&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\"&gt; &lt;include file=\"/db/user_create.xml\" /&gt; &lt;include file=\"/db/user_insert.xml\" /&gt; &lt;include file=\"/db/user_update.xml\" /&gt;&lt;/databaseChangeLog&gt; user_create.xml 1234567891011121314151617181920212223&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;databaseChangeLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\"&gt; &lt;changeSet author=\"admin\" id=\"1\"&gt; &lt;createTable tableName=\"person\"&gt; &lt;column autoIncrement=\"true\" name=\"id\" type=\"INT\"&gt; &lt;constraints primaryKey=\"true\"/&gt; &lt;/column&gt; &lt;column name=\"name\" type=\"VARCHAR(255)\"&gt; &lt;constraints nullable=\"false\"/&gt; &lt;/column&gt; &lt;column name=\"address\" type=\"VARCHAR(255)\"/&gt; &lt;/createTable&gt; &lt;rollback&gt; &lt;dropTable tableName=\"person\"/&gt; &lt;/rollback&gt; &lt;/changeSet&gt;&lt;/databaseChangeLog&gt; user_insert.xml 12345678910111213141516&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;databaseChangeLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\"&gt; &lt;changeSet author=\"admin\" id=\"2\"&gt; &lt;insert tableName=\"person\"&gt; &lt;column name=\"id\" valueNumeric=\"1\"/&gt; &lt;column name=\"name\" value=\"Tom\"/&gt; &lt;column name=\"address\" value=\"USA\"/&gt; &lt;/insert&gt; &lt;/changeSet&gt;&lt;/databaseChangeLog&gt; user_update.xml 123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;databaseChangeLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\"&gt; &lt;changeSet author=\"admin\" id=\"3\"&gt; &lt;preConditions&gt; &lt;dbms type=\"h2\"/&gt; &lt;/preConditions&gt; &lt;update tableName=\"person\"&gt; &lt;column name=\"address\" value=\"India\"/&gt; &lt;where&gt;name = 'Tom'&lt;/where&gt; &lt;/update&gt; &lt;/changeSet&gt;&lt;/databaseChangeLog&gt; 서버 구동후 결과 http://localhost:8080/h2-console","link":"/2020/04/26/springboot_liquidbase/"},{"title":"미국주식 주문하기(영웅문)","text":"계좌개설 키움증권계좌개설 앱에서 계좌신청. 신청후 바로 문자로 계좌번호가 발급되지만 본인확인은 안된상태. 하루정도에 본인확인후에 매매가능. 이벤트 미국주식 40달러 이벤트. 이벤트 신청하면 계정당(계좌당x) 40달러 받을수 있음. 영웅문글로벌에서 메뉴&gt;홈&gt;맨아래 이벤트 배너에서 40달러 이벤트 신청. 환전 수수료 이벤트. 영웅문글로벌에서 메뉴&gt;홈&gt;맨아래 이벤트 배너에서 해외주식수수료 0.1% + 환율우대 95% 이벤트 신청 입금 입금시 비대면 계좌의 경우 연계은행 조회가 불가함. 아래 방법으로 입금가능. 기존 키움계좌에서 글로벌 계좌로 입금. 8 자리 증권계좌로 은행 인터넷 뱅킹으로 바로 송금. 매매 입금후 바로 원화로 매매를 하려하면 증거금이 부족하다고 나옴. 아래 방법으로 매매가능. 달러로 환전후 매매. 원화로 매매하려면, 원화주문 서비스 신청필요. 영웅문글로벌에서 메뉴&gt;원화주문&gt;신청/해지 에서 신청 오후 10:30분에 미국장이 열리므로 그전에는 예약주문으로됨. 오후 7:30 분부터는 바로 예약 주문이 가능하므로 원화로 주문하여도 환율차이 없이 바로 주문 가능하지만, 그전에 주문 할 경우 환율변동으로 인해 실제 주문가격과 다를 수 있음. 환전 가능한 시간 영업일 : 00:1016:50 , 17:0023:50 토/일/공휴일 : 00:10~23:50 개장 폐장 시간 뉴욕시간으로 오전 9 : 30 개장 - 오후 4 : 00 폐장 입니다 (후장 10분간 동시호가) 한국시간으로는 4월~10월 : 밤 10 : 30 개장 - 다음날 새벽 5 : 00 폐장 (미국의 써머타임 적용기) 11월~3월 : 밤 11 : 30 개장 - 다음날 새벽 6 : 00 폐장 용어 가환율 : 17:00 이후에 환전할 시 적용되는 환율. 영업일인 17:00 직적환율에서 +- 5%정도를 적용한 환율. 추가된 환율의 차액분은 16:35에 일괄 입출금.","link":"/2020/04/26/stock/"},{"title":"transaction","text":"Transactional Ref _https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html_","link":"/2020/04/26/transactional/"},{"title":"ubuntu","text":"Ubuntu command 이거저거docker ubuntu 초기 설치 apt install -y net-tools vim curl apt 패키지 설치 apt install 패키지이름 패키지 삭제 apt remove 패키지이름 패키지와 설정파일 제거 apt purge 패키지이름 사용하지 않는 패키지제거 apt autoremove 패키지 목록 검색 apt search 키워드 패키지 상세정보 apt show 패키지이름 패키지 목록 apt list 패키지명 [–installed|–-upgradable|–-all-versions] 패키지 목록 업데이트 apt update 패키지 업그레이드 (apt list –upgradable 을 업그레이드) apt upgrade service, systemctl, chkconfigip 확인hostname -iifconfig","link":"/2020/04/29/ubuntu/"},{"title":"MarkDown Template","text":"SubTitle SubTitle List Paragraph Table Links Code Image emphasys Blockquotes Inline code Task lists List unordered list unordered list unordered list unordered list unordered list ordered list ordered list ordered list ordered list ordered list Paragraph title1 ⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown). Table table center align description name1 center right name2 center right LinksAdmin_Guide logging _https://docs.wildfly.org/12/Admin_Guide.html#Logging_ Code 1gem install asciidoctor 123public static void main(String[] args){ System.out.println(\"test!!!\");} Image emphasysYou can combine them Blockquotes win + ctrl + D : create virtual desktop Inline code&lt;addr&gt; element here instead. Horizontal Rule Task lists Finish my changes Push my commits to GitHub Open a pull request","link":"/2020/04/26/template/"},{"title":"vs code","text":"Visual Studio Cdoekeyboard-shortcuts-windows ShortcutExtension Common Shortcut quick command (@qc) : ctrl + 3 , ctrl + shift + p go to symbol : ctrl + o open file :ctrl + p open shortcut setting : @qc &amp; type “open shortcut” open default settings : @qc &amp; type “open default settings” open settings ui : @qc &amp; type “open settings ui” view : ctrl + shift + E(explore) view : ctrl + shift + F(find), ctrl + h view : ctrl + shift + g(scm) view : ctrl + shift + d(debug) view : ctrl + shift + x(extension) Common Extension colonize : auto semicolon Comma Enter (alt + enter 로 변경) eclipse keymap npm intellisense vetur Vue2 Snippets open browser vscode 에서 마크다운 작성을 편하게 extension Markdzhang.markdown-all-in-one ctrl + b : bold ctrl + i : italic ctrl + ] : add # ctrl + [ : remove # ctrl + shfit + F : formatter (selection) + ctrl + v : make link git bash 로 터미널 설정 git bash 설치 bash profile 변경 (링크) open settings : ctrl + , terminal.integrated.shell.windows search Edit in settings.json 123456789101112{ \"terminal.integrated.shell.windows\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\", \"git.autofetch\": true, \"git.enableSmartCommit\": true, \"git.confirmSync\": false, \"window.zoomLevel\": 0, \"diffEditor.ignoreTrimWhitespace\": true, \"terminal.integrated.shellArgs.windows\": [ \"--login\", \"-i\" ],}","link":"/2020/04/26/vscode/"},{"title":"vue","text":"indexVue","link":"/2020/04/26/vue/"},{"title":"window","text":"lonovo fn + shift + esc or ctrl + shift + esc : hotkey lock window 10 win + ctrl + D : create virtual desktop win + ctrl + f4 : delete virtual desktop win + ctrl + arrow : move virtual desktop win + s : search win + x : admin menu win + k : search wireless device win + i : open control panel win + Shift + S : 선택한 영역만 캡처 win + PrtScn : 화면 전체 캡처 + 자동 저장 win + s + snip : 캡쳐도구 window 10 설치 rufus-3.9p.exe 로 win 10 remiz 부팅/설치 디스크 생성. MBR 로.. (오피스 한글 따로 설치하기 귀찮아서.. 2016 통합버전을 그대로 쓰려한다) 설치시 파티션 GTP 로 안맞을경우 파티션 삭제후 재생성후 설치 올드 버전이라 기본 드라이버 안잡아주므로 무선드라이버도 설치안됨.. 다행히 이더넷 드라이버는 잡아주네. 랜선으로 연결. 윈도우 업데이트 실패시, 에러코드로 검색하여 최신 업데이트 installer 를 설치후 업데이트 (https://www.microsoft.com/ko-kr/software-download/windows10 윈도우업데이트 설치후 다시시도)","link":"/2020/04/26/window/"},{"title":"Spring Security Oauth2","text":"Spring Security Oauth2 Oauth2 란? slide _&lt;https://speakerdeck.com/aaronpk/securing-your-apis-with-oauth-2-dot-0?slide=16&gt;_ &lt;!-- ![](https://aichoora.github.io/images/springsecurity_oauth2/1.png) ![](https://aichoora.github.io/images/springsecurity_oauth2/2.png) ![](https://aichoora.github.io/images/springsecurity_oauth2/3.png) --&gt; ![](https://aichoora.github.io/images/springsecurity_oauth2/4.png) [![Video Label](https://img.youtube.com/vi/PfvSD6MmEmQ/0.jpg)](https://www.youtube.com/watch?v=PfvSD6MmEmQ) _&lt;https://www.oauth.com/playground/&gt;_ _&lt;https://www.oauth.com/oauth2-servers/access-tokens/&gt;_ spring oauth2 blog _https://coding-start.tistory.com/158_ OAuth 2 Developers Guide _https://projects.spring.io/spring-security-oauth/docs/oauth2.html_ spring security Ref _https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/_ Baeldung : Spring REST API + OAuth2 + Angular _https://www.baeldung.com/rest-api-spring-oauth2-angular_ Understanding OAuth2 _http://www.bubblecode.net/en/2016/01/22/understanding-oauth2/_ sample (client_credential)_https://docs.spring.io/spring-security-oauth2-boot/docs/current/reference/htmlsingle/_ pom 설정 @EnableAuthorizationServer 추가 client ID and secret pair test pom oauth2-autoconfiguration : 왠만한 자동설정 123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.security.oauth.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-security-oauth2-autoconfigure&lt;/artifactId&gt; &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt; @EnableAuthorizationServer main 에 @EnableAuthorizationServer 추가 123456789@EnableAuthorizationServer@SpringBootApplicationpublic class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); }} client id , secret 지정 안하면 기동 콘솔에 임의로 만들어준다. 12345security:oauth2: client: client-id: first-client client-secret: noonewilleverguess test curl client1:password@localhost:8080/oauth/token -dgrant_type=client_credentials -dscope=any 12345[C:\\~]$ curl client1:password@localhost:8080/oauth/token -dgrant_type=client_credentials -dscope=any% Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 148 0 109 100 39 109 39 0:00:01 --:--:-- 0:00:01 394{\"access_token\":\"98b33f98-a478-41bd-b291-acabab5544a0\",\"token_type\":\"bearer\",\"expires_in\":2999,\"scope\":\"any\"} sample (client_credential) + db pom 설정 db config 설정 sql DataSourceInitializer AuthorizationServer 설정 test pom h2 , jdbc 의존성을 추가한다. 123456789&lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt; db config 설정 sa/sa 계정으로 연결설정하고 console enable 한다. 12345678910spring: datasource: driver-class-name: org.h2.Driver password: sa url: jdbc:h2:mem:test; username: sa h2: console: enabled: true sql _https://www.baeldung.com/rest-api-spring-oauth2-angular_ client_credentials, authorization_code type 으로 2개 client 생성 bcrypt password 로 secret 생성(PasswordEncoderFactories.createDelegatingPasswordEncoder().encode(&quot;password&quot;)) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293drop table if exists oauth_client_details;create table oauth_client_details (client_id VARCHAR(255) PRIMARY KEY,resource_ids VARCHAR(255),client_secret VARCHAR(255),scope VARCHAR(255),authorized_grant_types VARCHAR(255),web_server_redirect_uri VARCHAR(255),authorities VARCHAR(255),access_token_validity INTEGER,refresh_token_validity INTEGER,additional_information VARCHAR(4096),autoapprove VARCHAR(255));-- client_credentialsINSERT INTO oauth_client_details (client_id, resource_ids, client_secret, scope, authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, refresh_token_validity, additional_information, autoapprove)VALUES ('client1', null, '{bcrypt}$2a$10$icO7AZq0uSKNNAlcnejKWeKJFSjdPC8xMrLAOFTRZ0pBxy/4PiCK2', 'any', 'client_credentials', null, null, 3000, -1, null, 'false');-- authorization_code INSERT INTO oauth_client_details (client_id, resource_ids, client_secret, scope, authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, refresh_token_validity, additional_information, autoapprove)VALUES ('client2', null, '{bcrypt}$2a$10$icO7AZq0uSKNNAlcnejKWeKJFSjdPC8xMrLAOFTRZ0pBxy/4PiCK2', 'read_profile,read_posts', 'authorization_code,refresh_token', 'http://localhost:9000/callback', null, 3000, -1, null, 'false');drop table if exists oauth_client_token;create table oauth_client_token (token_id VARCHAR(255),token VARCHAR(256),authentication_id VARCHAR(255) PRIMARY KEY,user_name VARCHAR(255),client_id VARCHAR(255));drop table if exists oauth_access_token;create table oauth_access_token (token_id VARCHAR(255),token VARCHAR(256),authentication_id VARCHAR(255) PRIMARY KEY,user_name VARCHAR(255),client_id VARCHAR(255),authentication VARCHAR(256),refresh_token VARCHAR(255));drop table if exists oauth_refresh_token;create table oauth_refresh_token (token_id VARCHAR(255),token VARCHAR(256),authentication VARCHAR(256));drop table if exists oauth_code;create table oauth_code (code VARCHAR(255), authentication VARCHAR(256));drop table if exists oauth_approvals;create table oauth_approvals ( userId VARCHAR(255), clientId VARCHAR(255), scope VARCHAR(255), status VARCHAR(10), expiresAt TIMESTAMP, lastModifiedAt TIMESTAMP);drop table if exists ClientDetails;create table ClientDetails (appId VARCHAR(255) PRIMARY KEY,resourceIds VARCHAR(255),appSecret VARCHAR(255),scope VARCHAR(255),grantTypes VARCHAR(255),redirectUrl VARCHAR(255),authorities VARCHAR(255),access_token_validity INTEGER,refresh_token_validity INTEGER,additionalInformation VARCHAR(4096),autoApproveScopes VARCHAR(255)); DataSourceInitializer 데이터 로드 12345678910111213141516171819@Configurationpublic class DatasourceInitializer { @Value(\"classpath:db/oauth2.sql\") private Resource schemaScript; @Bean public DataSourceInitializer dataSourceInitializer(DataSource dataSource) { DataSourceInitializer initializer = new DataSourceInitializer(); initializer.setDataSource(dataSource); initializer.setDatabasePopulator(databasePopulator()); return initializer; } private DatabasePopulator databasePopulator() { ResourceDatabasePopulator populator = new ResourceDatabasePopulator(); populator.addScript(schemaScript); return populator; }} 서버기동후 http://localhost:8080/h2-console 에서 데이터 로드 확인. AuthorizationServer 설정 ClientDetailsServiceConfigurer 설정하면 application.yml 설정은 무시된다. db 를 사용하도록하고 client secret 에 사용되는 PasswordEncoder 는 기본 bcrypt 로 설정 1234567891011@Configurationpublic class AuthorizationServer extends AuthorizationServerConfigurerAdapter { @Autowired DataSource dataSource; public void configure(ClientDetailsServiceConfigurer clients) throws Exception { clients .jdbc(this.dataSource) .passwordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder()); }} test 12345[C:\\~]$ curl client1:password@localhost:8080/oauth/token -dgrant_type=client_credentials -dscope=any% Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 148 0 109 100 39 109 39 0:00:01 --:--:-- 0:00:01 394{\"access_token\":\"98b33f98-a478-41bd-b291-acabab5544a0\",\"token_type\":\"bearer\",\"expires_in\":2999,\"scope\":\"any\"} sample (authorization_code) End User(Resource Owner) 설정 redirect Uri 설정 test End User(Resource Owner) 설정 12345678910111213@EnableWebSecuritypublic class WebSecurity extends WebSecurityConfigurerAdapter { @Bean @Override public UserDetailsService userDetailsService() { return new InMemoryUserDetailsManager( User.withDefaultPasswordEncoder() .username(\"user\") .password(\"password\") .roles(\"USER\") .build()); }} redirect Uri 설정 위 sql 에 client2 부분. test login page 와 approve 페이지는 authorization server 에서 제공한다. Flow : oauth/authorize (code 요청) -&gt; 로그인 -&gt; 권한승인 -&gt; redirect 브라우저 요청.http://localhost:8080/oauth/authorize?grant_type=authorization_code&amp;response_type=code&amp;client_id=client2&amp;state=1234 로그인 권한승인 redirecturi (리소스서버로 code 전달 url)http://localhost:9000/callback?code=lcGAj8&amp;state=1234 accesstoken 발급 curl client2:password@localhost:8080/oauth/token -dcode=lcGAj8 -dgrant_type=authorization_code -dscope=read_profile -dredirect_uri=http%3A%2F%2Flocalhost%3A9000%2Fcallback 12345[C:\\~]$ curl client2:password@localhost:8080/oauth/token -dcode=lcGAj8 -dgrant_type=authorization_code -dscope=read_profile -dredirect_uri=http%3A%2F%2Flocalhost%3A9000%2Fcallback% Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 298 0 184 100 114 184 114 0:00:01 --:--:-- 0:00:01 2709{\"access_token\":\"a3dc423b-dbdc-467d-b87b-7f1b0d137a42\",\"token_type\":\"bearer\",\"refresh_token\":\"af2a7eb5-4bb0-4312-9154-8bb1f1874906\",\"expires_in\":2999,\"scope\":\"read_profile read_posts\"}","link":"/2020/04/26/springsecurity_oauth2/"}],"tags":[{"name":"documentation","slug":"documentation","link":"/tags/documentation/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"infra","slug":"infra","link":"/tags/infra/"},{"name":"plant","slug":"plant","link":"/tags/plant/"}],"categories":[{"name":"documentation","slug":"documentation","link":"/categories/documentation/"},{"name":"webdev","slug":"webdev","link":"/categories/webdev/"},{"name":"troubleshooting","slug":"troubleshooting","link":"/categories/troubleshooting/"},{"name":"deploy","slug":"deploy","link":"/categories/deploy/"},{"name":"cli","slug":"cli","link":"/categories/cli/"},{"name":"team","slug":"team","link":"/categories/team/"},{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"ide","slug":"ide","link":"/categories/ide/"},{"name":"security","slug":"security","link":"/categories/security/"},{"name":"logging","slug":"logging","link":"/categories/logging/"},{"name":"pm","slug":"pm","link":"/categories/pm/"},{"name":"plant","slug":"plant","link":"/categories/plant/"},{"name":"database","slug":"database","link":"/categories/database/"},{"name":"stock","slug":"stock","link":"/categories/stock/"},{"name":"os","slug":"os","link":"/categories/os/"}]}